(function (doc, win) {
    var ID = "directssptag";

    win.reviveAsync = win.reviveAsync || {};

    try {
        if (!win.reviveAsync.hasOwnProperty(ID)) {
            var rv = win.reviveAsync[ID] = {
                id: Object.keys(win.reviveAsync).length,
                name: "dssp",

                start: function () {
                    var callback = function () {
                        try {
                            if (!rv.done) {
                                doc.removeEventListener("DOMContentLoaded", callback, false);
                                win.removeEventListener("load", callback, false);

                                rv.done= true;
                                rv.apply(rv.detect());
                            }
                        } catch (e) {
                            console.log(e);
                        }
                    };

                    if (doc.readyState === "complete") {
                        setTimeout(callback);
                    } else {
                        doc.addEventListener("DOMContentLoaded", callback, false);
                        win.addEventListener("load", callback, false);
                    }
                },

                /**
                 * Perform the AJAX call.
                 *
                 * @param string url
                 * @param object data
                 */
                ajax: function (url, data) {
                    var xhr = new XMLHttpRequest();

                    xhr.onreadystatechange = function() {
                        if (this.readyState == 4 ) {
                            if (this.status == 200) {
                                rv.spc(JSON.parse(this.responseText));
                            }
                        }
                    };

                    xhr.open("GET", url + "?" + rv.encode(data).join("&"), true);
                    xhr.withCredentials = true;
                    xhr.send();
                },

                /**
                 *
                 * @param object data the input hash
                 * @param string arr the variable "array" name (optional)
                 * @returns {Array}
                 */
                encode: function (data, arrayName){
                    var qs = [], k, j;

                    for (k in data) {
                        if (data.hasOwnProperty(k)) {
                            var key = arrayName ? arrayName + "[" + k + "]" : k;

                            if ((/string|number|boolean/).test(typeof data[k])) {
                                qs.push(encodeURIComponent(key) + "=" + encodeURIComponent(data[k]));
                            } else {
                                var a = rv.encode(data[k], key);
                                for (j in a) {
                                    qs.push(a[j]);
                                }
                            }
                        }
                    }

                    return qs;
                },

                apply: function (data) {
                    for (var i = 0; i < data.length; i++) {
                        if (data[i].pid) {
                            var url = doc.location.protocol == 'http:' ?
                                  "http://e.connectad.io/server" :
                                  "https://e.connectad.io/server";
                            data[i].ad = true;

                            rv.ajax(url, data[i]);
                        }
                    }
                },
                // GET all elemets of insert with data-XXX as a key
                detect: function () {
                    var elements = doc.querySelectorAll("ins[data-zone='dssp']");
                    var data = [];

                    for (var idx = 0; idx < elements.length; idx++) {
                        var data_temp = [];
                        var i = elements[idx];

                        if (i.hasAttribute("data-pid")) {
                            var regex = new RegExp("^data-(.*)$"),
                                m;

                            for (var j = 0; j < i.attributes.length; j++) {
                                if (m = i.attributes[j].name.match(regex)) {
                                    data_temp[m[1]] = i.attributes[j].value;
                                }
                            }
                            i.id = rv.name + i.getAttribute("data-t");
                        }
                        data.push(data_temp);
                    }
                    return data;
                },

                /**
                 * Create and return a new iframe.
                 *
                 * @param object data
                 * @returns JQuery
                 */
                createFrame: function (data) {
                    var i = doc.createElement('IFRAME'), s = i.style;

                    i.scrolling = "no";
                    i.frameBorder = 0;
                    i.width = data.width > 0 ? data.width : 0;
                    i.height = data.height > 0 ? data.height : 0;
                    s.border = 0;
                    s.overflow = "hidden";

                    return i;
                },

                /**
                 * Inject the HTML into the iframe
                 *
                 * @param Element iframe
                 * @param string html
                 */
                loadFrame: function (iframe, html) {
                    var d = iframe.contentDocument || iframe.contentWindow.document;

                    d.open();
                    d.writeln('<!DOCTYPE html>');
                    d.writeln('<html>');
                    d.writeln('<head><base target="_top"></head>');
                    d.writeln('<body border="0" margin="0" style="margin: 0; padding: 0">');
                    d.writeln(html);
                    d.writeln('</body>');
                    d.writeln('</html>');
                    d.close();
                },

                /**
                 * The AJAX Callback.
                 *
                 * @param object data
                 */
                spc: function (data) {

                    for (var id in data) {
                        if (data.hasOwnProperty(id)) {

                            var d = data[id];
                            var ins = doc.getElementById(id);

                            if (ins && d.html.length > 5) {
                                var newIns = doc.createElement('INS');

                                var i = rv.createFrame(d);
                                newIns.appendChild(i);
                                ins.parentNode.replaceChild(newIns, ins);
                                rv.loadFrame(i, d.html);
                            }
                        }
                    }
                }
            };

            rv.start();
        }
    } catch (e) {
        if (console.log) {
            console.log(e);
        }
    }
})(document, window);